/* <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zombie Survival City Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }

        #map {
            height: 100vh;
            width: 100%;
        }

        .weather-card {
            position: absolute;
            top: 90px;
            right: 10px;
            background: #1e293b;
            color: #e2e8f0;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            padding: 20px;
            z-index: 1000;
            text-align: center;
            font-family: Arial, sans-serif;
            width: 220px;
        }

        .weather-card h2 {
            margin: 0;
            font-size: 24px;
            color: #fbbf24;
        }

        .weather-card .weather-icon {
            font-size: 50px;
            margin: 15px 0;
        }

        .weather-card .weather-status {
            font-size: 18px;
            font-weight: bold;
        }

        .zombie-marker {
            background-color: red;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            border: 2px solid black;
        }

        .user-marker {
            background-color: green;
            border-radius: 50%;
            width: 15px;
            height: 15px;
            border: 2px solid black;
        }

        .info-box {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            font-family: Arial, sans-serif;
        }

        .info-box h3 {
            margin: 0 0 10px;
            font-size: 18px;
            color: #fbbf24;
        }

        .info-box p {
            margin: 5px 0;
        }
    </style>
</head>

<body>
    <h1 style="text-align:center;">Zombie Survival Live Map</h1>
    <div id="map"></div>
    <div class="weather-card" id="weather-card">
        <h2>Weather Update</h2>
        <div id="weather-icon" class="weather-icon">â˜€</div>
        <p id="weather-status" class="weather-status">Sunny</p>
    </div>

    <div class="info-box" id="info-box">
        <h3>Distance Info</h3>
        <p id="distance-zombie">Nearest Zombie: 0 m</p>
        <p id="distance-survivor">Nearest Survivor: 0 m</p>
        <p id="distance-resource">Nearest Resource: 0 m</p>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        const map = L.map('map').setView([20.3553, 85.8180], 15);  // Default starting view
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        const zombies = [
            { id: 1, lat: 20.3553, lng: 85.8180 },
            { id: 2, lat: 20.3560, lng: 85.8190 },
            { id: 3, lat: 20.3545, lng: 85.8175 },
            { id: 4, lat: 20.3580, lng: 85.8205 },
            { id: 5, lat: 20.3570, lng: 85.8210 },
            { id: 6, lat: 20.3530, lng: 85.8170 }
        ];

        const resources = [
            { type: 'Food', lat: 20.3558, lng: 85.8165, icon: 'https://cdn-icons-png.flaticon.com/512/706/706164.png' },
            { type: 'Medical', lat: 20.3562, lng: 85.8195, icon: 'https://cdn-icons-png.flaticon.com/512/2371/2371353.png' },
            { type: 'Weapon', lat: 20.3492, lng: 85.8195, icon: 'https://cdn-icons-png.flaticon.com/512/3836/3836755.png' },
            // New resources within 500 meters of existing ones
            { type: 'Food', lat: 20.3575, lng: 85.8170, icon: 'https://cdn-icons-png.flaticon.com/512/706/706164.png' },  // Food 2
            { type: 'Food', lat: 20.3565, lng: 85.8160, icon: 'https://cdn-icons-png.flaticon.com/512/706/706164.png' },  // Food 3
            { type: 'Medical', lat: 20.3590, lng: 85.8185, icon: 'https://cdn-icons-png.flaticon.com/512/2371/2371353.png' },  // Medical 2
            { type: 'Weapon', lat: 20.3550, lng: 85.8200, icon: 'https://cdn-icons-png.flaticon.com/512/3836/3836755.png' },  // Weapon 2
            { type: 'Weapon', lat: 20.3595, lng: 85.8170, icon: 'https://cdn-icons-png.flaticon.com/512/3836/3836755.png' },  // Weapon 3
            { type: 'Medical', lat: 20.3572, lng: 85.8178, icon: 'https://cdn-icons-png.flaticon.com/512/2371/2371353.png' }  // Medical 3
        ];

        const survivors = [
            { name: 'Mansha', lat: 20.3590, lng: 85.8200 },
            { name: 'Ishika', lat: 20.3585, lng: 85.8185 },
            { name: 'Anurag', lat: 20.3585, lng: 85.8184 },
            { name: 'Om', lat: 20.3600, lng: 85.8220 },
            { name: 'Geetika', lat: 20.3575, lng: 85.8205 },
            { name: 'Manish', lat: 20.3595, lng: 85.8190 }
        ];

        // Create zombie markers
        zombies.forEach(zombie => {
            const zombieIcon = L.divIcon({ className: 'zombie-marker' });
            L.marker([zombie.lat, zombie.lng], { icon: zombieIcon })
                .addTo(map)
                .bindPopup(`Zombie ${zombie.id}`);
        });

        // Create resource markers
        resources.forEach(resource => {
            const resourceIcon = L.icon({
                iconUrl: resource.icon,
                iconSize: [32, 32],
                iconAnchor: [16, 32],
                popupAnchor: [0, -32]
            });
            L.marker([resource.lat, resource.lng], { icon: resourceIcon })
                .addTo(map)
                .bindPopup(`${resource.type} Resource`);
        });

        // Create survivor markers
        survivors.forEach(survivor => {
            L.marker([survivor.lat, survivor.lng])
                .addTo(map)
                .bindPopup(`${survivor.name} - Survivor`);
        });

        // Function to create two max circles with the same coordinates
        function addMaxZombieProneZone(lat, lng) {
            // Circle 1 with 500m radius
            L.circle([lat, lng], {
                color: 'red',           // Red border
                fillColor: 'transparent', // No fill
                fillOpacity: 0,           // Transparent fill
                radius: 500
            }).addTo(map);

            // Circle 2 with 1000m radius
            L.circle([lat, lng], {
                color: 'red',           // Red border
                fillColor: 'transparent', // No fill
                fillOpacity: 0,           // Transparent fill
                radius: 1000
            }).addTo(map);
        }

        // Add two max zombie prone zones at the same coordinates
        addMaxZombieProneZone(20.3553, 85.8180);

        // Function to update distances and display in the info box
        function updateDistances(userLat, userLng) {
            let nearestZombieDistance = Infinity;
            zombies.forEach(zombie => {
                const distance = map.distance([userLat, userLng], [zombie.lat, zombie.lng]);
                if (distance < nearestZombieDistance) {
                    nearestZombieDistance = distance;
                }
            });

            let nearestSurvivorDistance = Infinity;
            survivors.forEach(survivor => {
                const distance = map.distance([userLat, userLng], [survivor.lat, survivor.lng]);
                if (distance < nearestSurvivorDistance) {
                    nearestSurvivorDistance = distance;
                }
            });

            let nearestResourceDistance = Infinity;
            resources.forEach(resource => {
                const distance = map.distance([userLat, userLng], [resource.lat, resource.lng]);
                if (distance < nearestResourceDistance) {
                    nearestResourceDistance = distance;
                }
            });

            // Update the info box
            document.getElementById('distance-zombie').innerText = `Nearest Zombie: ${Math.round(nearestZombieDistance)} m`;
            document.getElementById('distance-survivor').innerText = `Nearest Survivor: ${Math.round(nearestSurvivorDistance)} m`;
            document.getElementById('distance-resource').innerText = `Nearest Resource: ${Math.round(nearestResourceDistance)} m`;
        }

        // Function to add live user location marker
        let userMarker = null;

        function addUserMarker(lat, lng) {
            if (userMarker) {
                // Update the user's marker location if it already exists
                userMarker.setLatLng([lat, lng]);
            } else {
                // Otherwise, add a new marker
                userMarker = L.marker([lat, lng], {
                    icon: L.divIcon({ className: 'user-marker' })
                }).addTo(map).bindPopup('You are here!');
            }
        }

        // Check if geolocation is available and add user marker
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition(function (position) {
                const userLat = position.coords.latitude;
                const userLng = position.coords.longitude;

                // Add or update the user marker on the map
                addUserMarker(userLat, userLng);

                // Optionally, center the map to the user's location
                map.setView([userLat, userLng], 15);

                // Update distances every 2 seconds
                setInterval(() => {
                    updateDistances(userLat, userLng);
                }, 2000);
            }, function () {
                alert('Geolocation is not supported or permission denied.');
            });
        }
    </script>
</body>

</html> */
